{"version":3,"sources":["wrapper.js"],"names":["fn","ramdaWrappers","f1","prop","f2","f3","mergeWith","n1","curryN","apply","n2","n3","n4","n5","n6","n7","n8","n9","n10","ramdaWrappersList","Object","keys","map","x","toString","wrapper","FileName","Row","Char","fnName","__ramdaDebugWrapperClosure","args","Array","prototype","slice","call","arguments","result","Function","indexOf","e","message","console","error","regex","id","closureId"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAIA,KAAK,SAALA,EAAK,GAAM,CAAE,CAAjB;;AAEA,IAAMC,gBAAgB;AACpBC,MAAI,gBAAEC,IAAF,CAAO,GAAP,CADgB;AAEpBC,MAAI,gBAAED,IAFc;AAGpBE,MAAI,gBAAEC,SAHc;AAIpBC,MAAI,gBAAEC,MAAF,CAAS,CAAT,EAAYR,EAAZ,EAAgBS,KAAhB,CAAsB,IAAtB,EAA4B,CAAC,IAAD,CAA5B,CAJgB;AAKpBC,MAAI,gBAAEF,MAAF,CAAS,CAAT,EAAYR,EAAZ,CALgB;AAMpBW,MAAI,gBAAEH,MAAF,CAAS,CAAT,EAAYR,EAAZ,CANgB;AAOpBY,MAAI,gBAAEJ,MAAF,CAAS,CAAT,EAAYR,EAAZ,CAPgB;AAQpBa,MAAI,gBAAEL,MAAF,CAAS,CAAT,EAAYR,EAAZ,CARgB;AASpBc,MAAI,gBAAEN,MAAF,CAAS,CAAT,EAAYR,EAAZ,CATgB;AAUpBe,MAAI,gBAAEP,MAAF,CAAS,CAAT,EAAYR,EAAZ,CAVgB;AAWpBgB,MAAI,gBAAER,MAAF,CAAS,CAAT,EAAYR,EAAZ,CAXgB;AAYpBiB,MAAI,gBAAET,MAAF,CAAS,CAAT,EAAYR,EAAZ,CAZgB;AAapBkB,OAAK,gBAAEV,MAAF,CAAS,EAAT,EAAaR,EAAb;AAbe,CAAtB;;AAgBA,IAAMmB,oBAAoBC,OAAOC,IAAP,CAAYpB,aAAZ,EAA2BqB,GAA3B,CAA+B;AAAA,SAAKrB,cAAcsB,CAAd,EAAiBC,QAAjB,EAAL;AAAA,CAA/B,CAA1B;;AAEA,IAAMC,UAAU,SAAVA,OAAU,CAACC,QAAD,EAAWC,GAAX,EAAgBC,IAAhB,EAAsBC,MAAtB,EAA8B7B,EAA9B,EAAqC;AACnD,SAAO,SAAS8B,0BAAT,GAAsC;AAC3C,QAAIC,OAAOC,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAX;;AAEA,QAAI;AACF,UAAIC,SAASrC,GAAGS,KAAH,CAAS,IAAT,EAAesB,IAAf,CAAb;;AAEA,UACE,SAASM,kBAAkBC,QAA3B,IACG,CAAC,CAAD,KAAOnB,kBAAkBoB,OAAlB,CAA0BF,OAAOb,QAAP,EAA1B,CAFZ,EAGE;AACA,eAAOC,QAAQC,QAAR,EAAkBC,GAAlB,EAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCQ,MAArC,CAAP;AACD,OALD,MAKO;AACL,eAAOA,MAAP;AACD;AAEF,KAZD,CAYE,OAAMG,CAAN,EAAS;AACT,UAAIC,UAAaf,QAAb,SAAyBC,GAAzB,SAAgCC,IAAhC,SAAwCC,MAAxC,OAAJ;AACAa,cAAQC,KAAR,iBAA8BZ,IAA9B;AACAS,QAAEC,OAAF,GAAYA,UAAUD,EAAEC,OAAxB;AACAD,QAAEd,QAAF,GAAaA,QAAb;AACAc,QAAEb,GAAF,GAAQA,GAAR;AACAa,QAAEZ,IAAF,GAASA,IAAT;AACAY,QAAET,IAAF,GAASA,IAAT;AACA,YAAMS,CAAN;AACD;AACF,GAzBD;AA0BD,CA3BD;;AA6BA,IAAMI,QAAQ,2EAAd;;AAEA,IAAMC,KAAK,qBAAX;AACA,IAAMC,YAAY,4BAAlB;;QAESF,K,GAAAA,K;QAAkB5C,E,GAAXyB,O;QAAeoB,E,GAAAA,E;QAAIC,S,GAAAA,S","file":"wrapper.js","sourcesContent":["import R from 'ramda'\n\nlet fn = () => {}\n\nconst ramdaWrappers = {\n  f1: R.prop('a'),\n  f2: R.prop,\n  f3: R.mergeWith,\n  n1: R.curryN(2, fn).apply(null, [null]),\n  n2: R.curryN(2, fn),\n  n3: R.curryN(3, fn),\n  n4: R.curryN(4, fn),\n  n5: R.curryN(5, fn),\n  n6: R.curryN(6, fn),\n  n7: R.curryN(7, fn),\n  n8: R.curryN(8, fn),\n  n9: R.curryN(9, fn),\n  n10: R.curryN(10, fn)\n}\n\nconst ramdaWrappersList = Object.keys(ramdaWrappers).map(x => ramdaWrappers[x].toString())\n\nconst wrapper = (FileName, Row, Char, fnName, fn) => {\n  return function __ramdaDebugWrapperClosure() {\n    let args = Array.prototype.slice.call(arguments)\n\n    try {\n      let result = fn.apply(null, args)\n\n      if (\n        true === result instanceof Function\n        && -1 !== ramdaWrappersList.indexOf(result.toString())\n      ) {\n        return wrapper(FileName, Row, Char, fnName, result)\n      } else {\n        return result\n      }\n\n    } catch(e) {\n      let message = `${FileName}:${Row}:${Char}:${fnName}\\n`\n      console.error(`Error args: `, args)\n      e.message = message + e.message\n      e.FileName = FileName\n      e.Row = Row\n      e.Char = Char\n      e.args = args\n      throw e\n    }\n  }\n}\n\nconst regex = /__ramdaDebugWrapper\\('([\\.\\/\\w\\-]+)',\\s(\\d+),\\s(\\d+),\\s'(\\w+)',\\s(\\w+)\\)/g\n\nconst id = '__ramdaDebugWrapper'\nconst closureId = '__ramdaDebugWrapperClosure'\n\nexport { regex, wrapper as fn, id, closureId }\n"]}