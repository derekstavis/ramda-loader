{"version":3,"sources":["isIdentifier.js"],"names":["isIdentifier","node","parent","type","expression","name","value","init","undefined","arguments","find","x","argument","elements","object","start","indexOf","property","callee","declaration","right"],"mappings":";;;;;;AACA,IAAMA,eAAe,SAAfA,YAAe,CAACC,IAAD,EAAOC,MAAP,EAAkB;;AAErC,MACGD,KAAKE,IAAL,KAAc,YAAf,KACGD,OAAOC,IAAP,KAAgB,qBAAhB,IACID,OAAOE,UAAP,CAAkBC,IAAlB,KAA2BJ,KAAKI,IADrC,IAECH,OAAOC,IAAP,KAAgB,UAAhB,IAA8BD,OAAOI,KAAP,CAAaD,IAAb,KAAsBJ,KAAKI,IAF1D,IAGCH,OAAOC,IAAP,KAAgB,oBAAhB,IAAwCD,OAAOK,IAAP,CAAYF,IAAZ,KAAqBJ,KAAKI,IAHnE,IAICH,OAAOC,IAAP,KAAgB,gBAAhB,IACCK,cAAcN,OAAOO,SAAP,CAAiBC,IAAjB,CAAsB;AAAA,WAAKC,EAAEN,IAAF,KAAWJ,KAAKI,IAArB;AAAA,GAAtB,CALhB,IAMCH,OAAOC,IAAP,KAAgB,iBAAhB,IAAqCD,OAAOU,QAAP,CAAgBP,IAAhB,KAAyBJ,KAAKI,IANpE,IAOCH,OAAOC,IAAP,KAAgB,iBAAhB,IACCK,cAAcN,OAAOW,QAAP,CAAgBH,IAAhB,CAAqB;AAAA,WAAKC,EAAEN,IAAF,KAAWJ,KAAKI,IAArB;AAAA,GAArB,CARhB,IASCH,OAAOC,IAAP,KAAgB,kBAAhB,IACAD,OAAOY,MAAP,CAAcT,IAAd,KAAuBJ,KAAKI,IAD5B,IAEAH,OAAOY,MAAP,CAAcC,KAAd,KAAwBd,KAAKc,KAF7B,IAGA,CAAC,CAAD,KAAO,CAAC,OAAD,EAAU,MAAV,EAAkBC,OAAlB,CAA0Bd,OAAOe,QAAP,CAAgBZ,IAA1C,CAZR,IAaCH,OAAOC,IAAP,KAAgB,gBAAhB,IAAoCD,OAAOgB,MAAP,CAAcb,IAAd,KAAuBJ,KAAKI,IAbjE,IAcCH,OAAOC,IAAP,KAAgB,uBAdjB,IAeCD,OAAOC,IAAP,KAAgB,0BAAhB,IACAD,OAAOiB,WAAP,CAAmBd,IAAnB,KAA4BJ,KAAKI,IAhBlC,IAiBCH,OAAOC,IAAP,KAAgB,sBAAhB,IACAD,OAAOkB,KAAP,CAAaf,IAAb,KAAsBJ,KAAKI,IAnB9B,CADF,EAsBE;AACA,WAAO,IAAP;AACD,GAxBD,MAwBO;AACL,WAAO,KAAP;AACD;AAEF,CA9BD;;kBAgCeL,Y","file":"isIdentifier.js","sourcesContent":["\nconst isIdentifier = (node, parent) => {\n\n  if (\n    (node.type === 'Identifier') && (\n      (parent.type === 'ExpressionStatement' \n        && parent.expression.name === node.name) ||\n      (parent.type === 'Property' && parent.value.name === node.name) ||\n      (parent.type === 'VariableDeclarator' && parent.init.name === node.name) ||\n      (parent.type === 'CallExpression' &&\n        undefined !== parent.arguments.find(x => x.name === node.name)) ||\n      (parent.type === 'ReturnStatement' && parent.argument.name === node.name) ||\n      (parent.type === 'ArrayExpression' &&\n        undefined !== parent.elements.find(x => x.name === node.name)) ||\n      (parent.type === 'MemberExpression' &&\n       parent.object.name === node.name &&\n       parent.object.start === node.start &&\n       -1 !== ['apply', 'call'].indexOf(parent.property.name)) ||\n      (parent.type === 'CallExpression' && parent.callee.name === node.name) ||\n      (parent.type === 'ConditionalExpression') ||\n      (parent.type === 'ExportDefaultDeclaration' &&\n       parent.declaration.name === node.name) ||\n      (parent.type === 'AssignmentExpression' &&\n       parent.right.name === node.name)\n    )\n  ) {\n    return true\n  } else {\n    return false\n  }\n\n}\n\nexport default isIdentifier\n"]}