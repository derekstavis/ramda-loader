{"version":3,"sources":["loader.js"],"names":["acorn","require","module","exports","source","map","self","ast","query","parseQuery","debug","strict","undefined","ramdaImportFns","wrapperId","ramdaFns","Object","keys","filter","x","file","resourcePath","cacheable","visitor","leave","parse","sourceType","e","callback","tree","generate","length","header","join","__dirname"],"mappings":";;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAPA,IAAIA,QAAQC,QAAQ,OAAR,CAAZ;;;AASAC,OAAOC,OAAP,GAAiB,UAASC,MAAT,EAAiBC,GAAjB,EAAsB;AACrC,MAAIC,OAAO,IAAX;AACA,MAAIC,YAAJ;;AAEA,MAAMC,QAAQ,sBAAYC,UAAZ,CAAuBH,KAAKE,KAA5B,CAAd;;AAEA;AACAF,OAAKI,KAAL,GAAaF,MAAME,KAAnB;AACAJ,OAAKK,MAAL,GAAcH,MAAMG,MAAN,KAAiBC,SAAjB,GAA6B,IAA7B,GAAoCJ,MAAMG,MAAxD;AACAL,OAAKO,cAAL,GAAsB,EAAtB;AACAP,OAAKQ,SAAL;AACAR,OAAKS,QAAL,GAAgBC,OAAOC,IAAP,kBAAeC,MAAf,CAAsB;AAAA,WAAKC,MAAM,SAAX;AAAA,GAAtB,CAAhB;AACAb,OAAKc,IAAL,GAAY,+BAAgBd,KAAKe,YAArB,CAAZ;AACAf,OAAKF,MAAL,GAAcA,MAAd;AACAE,OAAKgB,SAAL;;AAEA,MAAIC,UAAU;AACZC,WAAO,0BAAWlB,IAAX;AADK,GAAd;;AAIA,MAAI;AACFC,UAAMP,MAAMyB,KAAN,CAAYrB,MAAZ,EAAoB;AACxBsB,kBAAY;AADY,KAApB,CAAN;AAGD,GAJD,CAIE,OAAOC,CAAP,EAAU;AACVrB,SAAKsB,QAAL,CAAc,IAAd,EAAoBxB,MAApB,EAA4BC,GAA5B;AACA;AACD;;AAED,MAAIC,KAAKI,KAAL,KAAe,IAAnB,EAAyB;AACvB,QAAImB,OAAO,yBAAQtB,GAAR,EAAagB,OAAb,CAAX;AACAnB,aAAS,oBAAU0B,QAAV,CAAmBD,IAAnB,CAAT;AACD,GAHD,MAGO;AACL,8BAAStB,GAAT,EAAcgB,OAAd;AACD;;AAED;AACA,MAAIjB,KAAKO,cAAL,CAAoBkB,MAApB,GAA6B,CAAjC,EAAoC;;AAElC,QAAIzB,KAAKK,MAAT,EAAiB;AACd;AACD,UAAIqB,SAAS,4BAAb;AACAA,gBAAU,gBAAEC,IAAF,CAAO,IAAP,EAAa,gBAAE5B,GAAF,CAAM;AAAA,wBAAYc,CAAZ,aAAqBA,CAArB;AAAA,OAAN,EAAgCb,KAAKO,cAArC,CAAb,CAAV;AACAT,eAAS4B,SAAS,MAAT,GAAkB5B,MAA3B;AACD;;AAED;AACA,QAAIE,KAAKI,KAAL,KAAe,IAAnB,EAAyB;AACvBN,wDAAwC8B,SAAxC,qCAAgF9B,MAAhF;AACD;AAEF;;AAEDE,OAAKsB,QAAL,CAAc,IAAd,EAAoBxB,MAApB,EAA4BC,GAA5B;AACD,CAtDD","file":"loader.js","sourcesContent":["var acorn = require('acorn')\nimport escodegen from 'escodegen'\nimport R from 'ramda'\nimport { traverse, replace } from 'estraverse'\nimport loaderUtils from 'loader-utils'\nimport getVisitor from './getVisitor'\nimport shortenFileName from './shortenFileName'\nimport { id as wrapperId } from './wrapper'\n\nmodule.exports = function(source, map) {\n  let self = this\n  let ast\n\n  const query = loaderUtils.parseQuery(self.query)\n\n  // Setup context\n  self.debug = query.debug\n  self.strict = query.strict === undefined ? true : query.strict\n  self.ramdaImportFns = []\n  self.wrapperId = wrapperId\n  self.ramdaFns = Object.keys(R).filter(x => x !== 'default')\n  self.file = shortenFileName(self.resourcePath)\n  self.source = source\n  self.cacheable()\n\n  let visitor = {\n    leave: getVisitor(self)\n  }\n\n  try {\n    ast = acorn.parse(source, {\n      sourceType: 'module'\n    })\n  } catch (e) {\n    self.callback(null, source, map)\n    return\n  }\n\n  if (self.debug === true) {\n    let tree = replace(ast, visitor)\n    source = escodegen.generate(tree)\n  } else {\n    traverse(ast, visitor)\n  }\n\n  // Add header and imports only if the file contained RamdaJs functions\n  if (self.ramdaImportFns.length > 0) {\n\n    if (self.strict) {\n       // Add global Ramda fns\n      let header = 'var R = require(\"ramda\")\\n'\n      header += R.join('\\n', R.map(x => `var ${x} = R.${x}`, self.ramdaImportFns))\n      source = header + '\\n\\n' + source\n    }\n\n    // Add ramdaDebugWrapper\n    if (self.debug === true) {\n      source = `var ${wrapperId} = require('${__dirname}/../dist/wrapper.js').fn \\n ${source}`\n    }\n\n  }\n\n  self.callback(null, source, map)\n}\n"]}